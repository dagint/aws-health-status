AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'CloudFormation creates needed code and infrastructure to poll the AWS Health API every 1 minute to determine if there is any AWS Status Health Dashboard events effecting specific services in specific regions.  Creates several resources (DynamoDB Table, SNSTopic, CloudWatch Events, Lambda Function) and grants the appropriate IAM permissions.  '
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          Default: "Lambda code S3 bucket and key location"
        Parameters:
          - S3CodeBucket
          - S3CodeZip
      -
        Label:
          default: "Environment Variables"
        Parameters:
          - EnvTimeToLiveSeconds
          - EnvRegions
      -
        Label:
          default: "SNS Configuration"
        Parameters:
          - SNSTopicCreate
          - SNSNotify
Parameters:
  EnvTimeToLiveSeconds:
    Description: "Timeout DynamoDB records should expire in seconds default 14400=4hrs"
    Default: "14400"
    Type: Number
  EnvRegions:
    Description: "List of specific regions you would like to be alerted on.  If left blank it will alert on all regions.  ie 'us-east-1','us-east-2','global'"
    Type: String
  SNSNotify:
    Description: "Email address to notify, CreateSNSTopic would need to be true"
    Type: String
  SNSTopicCreate:
    Description: "Whether I should create SNS Topic"
    Default: false
    Type: String
    AllowedValues: [true, false]
  S3CodeBucket:
    Description: "S3 bucket name of where zipped code is stored.  Needs to be in the same region you are launching this in."
    Type: String
  S3CodeZip:
    Description: "S3 key name of code zip file (path and filename)"
    Type: String
Conditions:
  ShouldCreateSNS:
    !Equals [true, !Ref SNSTopicCreate]
Resources:
  SHDIssuesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "arn"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "arn"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: TRUE
  SHDSNSTopic:
    Type: AWS::SNS::Topic
    Condition: ShouldCreateSNS
    Properties:
      Subscription:
        - Endpoint: !Ref 'SNSNotify'
          Protocol: "email"
      TopicName: "SHDNotify"
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Condition: ShouldCreateSNS
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: SHDIssuesRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - health:*
              - dynamodb:ListTables
            Resource: "*"
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref SHDSNSTopic
          - Effect: Allow
            Action:
              - dynamodb:UpdateTimeToLive
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:UpdateItem
              - dynamodb:UpdateTable
              - dynamodb:GetRecords
            Resource: !GetAtt SHDIssuesTable.Arn
  LambdaAwsHealthStatus:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "lambda_function.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "python3.7"
      Timeout: "90"
      Description: "Lambda code to determine if a SHD update has posted"
      FunctionName: "aws-health-status"
      Code:
        S3Bucket: !Ref S3CodeBucket
        S3Key: !Ref S3CodeZip
      Environment:
        Variables:
          regions: !Ref EnvRegions
          ttl: !Ref EnvTimeToLiveSeconds
          enableSNS: !If [ShouldCreateSNS, true, false]
          SNSTopic: !If [ShouldCreateSNS, !Ref SHDSNSTopic, "empty"]
          ddbTable: !Ref SHDIssuesTable
  SHDScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "SHDScheduledRule"
      ScheduleExpression: "rate(1 minute)"
      State: "ENABLED"
      Targets:
        -
          Arn: !GetAtt LambdaAwsHealthStatus.Arn
          Id: "TargetFunctionV1"
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "LambdaAwsHealthStatus"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt SHDScheduledRule.Arn
Outputs:
  TableIssueName:
    Value: !Ref 'SHDIssuesTable'
    Description: Table issues name of the newly created DynamoDB table
